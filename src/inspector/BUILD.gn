import(
    "//third_party/electron_node/tools/inspector_protocol/inspector_protocol.gni")
import("//v8/gni/v8.gni")

inspector_protocol_dir = "../../tools/inspector_protocol"

# These are from node_protocol_config.json
# These convoluted path hacks are to work around the fact that node.js is very
# confused about what paths are in its includes, without changing node at all.
# Hopefully, keying everything in this file off the paths that are in
# node_protocol_config.json will mean that the paths stay in sync.
inspector_protocol_output = "node/inspector/protocol"

_protocol_generated = [
  "$inspector_protocol_output/Forward.h",
  "$inspector_protocol_output/Protocol.cpp",
  "$inspector_protocol_output/Protocol.h",
  "$inspector_protocol_output/NodeWorker.cpp",
  "$inspector_protocol_output/NodeWorker.h",
  "$inspector_protocol_output/NodeTracing.cpp",
  "$inspector_protocol_output/NodeTracing.h",
  "$inspector_protocol_output/NodeRuntime.cpp",
  "$inspector_protocol_output/NodeRuntime.h",
]

config("inspector_config") {
  include_dirs = [
    "$target_gen_dir",
    "$target_gen_dir/src",
  ]

  configs = [ "../..:node_features" ]
}

source_set("inspector") {
  sources = [
    "main_thread_interface.cc",
    "main_thread_interface.h",
    "node_string.cc",
    "node_string.h",
    "runtime_agent.cc",
    "runtime_agent.h",
    "tracing_agent.cc",
    "tracing_agent.h",
    "worker_agent.cc",
    "worker_agent.h",
    "worker_inspector.cc",
    "worker_inspector.h",
  ]
  sources += rebase_path(_protocol_generated, ".", "$target_gen_dir/src")
  include_dirs = [
    "//v8/include",
    "..",
  ]
  deps = [
    ":protocol_generated_sources",
    ":v8_inspector_compress_protocol_json",
    "../../deps/uv",
    "//third_party/icu:icuuc",
  ]
  configs += [ "../..:node_internal_config" ]
  public_configs = [ ":inspector_config" ]
}

inspector_protocol_generate("protocol_generated_sources") {
  inspector_protocol_dir = "$inspector_protocol_dir"
  config_file = "node_protocol_config.json"
  inputs = [
    "$target_gen_dir/src/node_protocol.json",
  ]
  outputs = _protocol_generated
  out_dir = "$target_gen_dir/src"
  deps = [
    ":node_protocol_json",
  ]
}

template("generate_protocol_json") {
  copy_target_name = target_name + "_copy"
  copy(copy_target_name) {
    sources = invoker.sources
    outputs = [
      "$target_gen_dir/{{source_file_part}}",
    ]
  }
  copied_pdl = get_target_outputs(":$copy_target_name")
  action(target_name) {
    deps = [
      ":$copy_target_name",
    ]
    sources = copied_pdl
    outputs = invoker.outputs
    script = "//v8/third_party/inspector_protocol/convert_protocol_to_json.py"
    args = rebase_path(sources + outputs, root_build_dir)
  }
}

generate_protocol_json("node_protocol_json") {
  sources = [
    "node_protocol.pdl",
  ]
  outputs = [
    "$target_gen_dir/src/node_protocol.json",
  ]
}

generate_protocol_json("v8_protocol_json") {
  sources = [
    "//v8/src/inspector/js_protocol.pdl",
  ]
  outputs = [
    "$target_gen_dir/js_protocol.json",
  ]
}

action("concatenate_protocols") {
  deps = [
    ":node_protocol_json",
    ":v8_protocol_json",
  ]
  inputs = [
    "$target_gen_dir/js_protocol.json",
    "$target_gen_dir/src/node_protocol.json",
  ]
  outputs = [
    "$target_gen_dir/concatenated_protocol.json",
  ]
  script = "//v8/third_party/inspector_protocol/concatenate_protocols.py"
  args = rebase_path(inputs + outputs, root_build_dir)
}

action("v8_inspector_compress_protocol_json") {
  deps = [
    ":concatenate_protocols",
  ]
  inputs = [
    "$target_gen_dir/concatenated_protocol.json",
  ]
  outputs = [
    "$target_gen_dir/v8_inspector_protocol_json.h",
  ]
  script = "../../tools/compress_json.py"
  args = rebase_path(inputs + outputs, root_build_dir)
}
